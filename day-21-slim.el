(defun parse-monkey-expr (line)
  (-map #'read-all-from-string (s-split ":" line)))

(defun read-21 (string)
  (let ((monkeys (ht)))
    (prog1 monkeys
      (cl-loop for line in (s-split "\n" string t)
               for ((name) (arg1 op arg2)) = (parse-monkey-expr line)
               do (setf (h. monkeys name) (if op (list op arg1 arg2) arg1))))))

(defun monkey-solve (monkeys root &optional unknown)
  (let ((invs (ht ('+ '-) ('- '+) ('* '/) ('/ '*))))
    (cl-labels ((rec (name)
                  (if (and unknown (equal name unknown))
                      #'identity
                    (pcase-exhaustive (h. monkeys name)
                      ((and x (pred integerp))
                       x)
                      (`(,op ,arg1 ,arg2)
                       (let* ((args (list (rec arg1) (rec arg2)))
                              (leftp (functionp (car args))))
                         (if (cl-every #'integerp args)
                             (apply op args)
                           (cl-destructuring-bind (func val)
                               (if leftp args (reverse args))
                             (let ((inv (if (or (member op '(+ *)) leftp)
                                            (h. invs op)
                                          (-flip op))))
                               (lambda (res)
                                 (funcall func (funcall inv res val))))))))))))
      (rec root))))

(defun solve-21-1 (monkeys)
  (monkey-solve monkeys 'root))

(defun solve-21-2 (monkeys)
  (let ((args (-map (-cut monkey-solve monkeys <> 'humn)
                    (cdr (h. monkeys 'root)))))
    (cl-destructuring-bind (func res)
        (if (functionp (car args)) args (reverse args))
      (funcall func res))))
